# de.unibamberg.psi.booklet-tool.yml
app-id: de.unibamberg.psi.booklet-tool
runtime: org.freedesktop.Platform
runtime-version: '24.08' # Matches BaseApp version
sdk: org.freedesktop.Sdk
base: org.electronjs.Electron2.BaseApp
base-version: '23.08' # Stable version, should exist if Flathub remote is configured
sdk-extensions:
  - org.freedesktop.Sdk.Extension.node20 # Use Node 20 SDK Extension
command: booklet-tool # Should match the executable

build-options:
  # Add Node bin to path and set required env vars for build
  append-path: /usr/lib/sdk/node20/bin
  env:
    # Set Node dir for native modules
    npm_config_nodedir: /usr/lib/sdk/node20
    # Use npm cache dir within the build sandbox
    npm_config_cache: /run/build/booklet-tool/.npm-cache
    # Recommended for reproducible builds in CI
    npm_config_offline: 'true'
    # Correct Electron distribution type for Flatpak
    ELECTRON_OVERRIDE_DISTRIBUTION: 'flatpak'
    # Ensure electron-builder uses the correct arch from flatpak-builder
    ELECTRON_ARCH: $FLATPAK_ARCH
    # Prevent building unnecessary installers
    ELECTRON_BUILDER_ALLOW_INSTALLER_TARGET: "false"
    # Cache location for npm inside the build sandbox
    XDG_CACHE_HOME: /run/build/booklet-tool/flatpak-node/cache
    # Add Node options here to help with potential network issues in sandbox
    NODE_OPTIONS: --dns-result-order=ipv4first
    ELECTRON_BUILDER_ARCH_ARGS: ""
    # Add this to ensure npm ci uses offline mode
    npm_config_prefer_offline: 'true'
    # Add this to prevent automatic node-gyp rebuilds
    npm_config_build_from_source: 'false'

finish-args:
  # Filesystem access needed for selecting directories
  - "--filesystem=host"
  # Network access might be needed (e.g., updates?), keep for now
  - "--share=network"
  # Add Wayland/X11 socket access for GUI
  - "--socket=wayland"
  - "--socket=fallback-x11"
  # Device access might be needed depending on peripherals
  - "--device=dri"

modules:
  - name: booklet-tool
    buildsystem: simple
    build-commands:
      # Setup and prepare environment
      - rm -rf .npm-cache || true
      - mkdir -p .npm-cache
      
      # Install dependencies in offline mode
      - npm ci --offline
      
      # Source the architecture detection script
      - . ./electron-builder-arch-args.sh
      
      # Build the application once with all appropriate flags
      - NODE_OPTIONS=--dns-result-order=ipv4first npx electron-builder --dir --linux $ELECTRON_BUILDER_ARCH_ARGS --publish never
      
      # Install the application
      - |
        if [ "$FLATPAK_ARCH" = "aarch64" ]; then
          UNPACKED_DIR="dist/linux-arm64-unpacked"
        else
          UNPACKED_DIR="dist/linux-unpacked"
        fi
        cp -r ${UNPACKED_DIR}/* /app/
      
      # Install desktop file and icon
      - install -Dm644 build/icon.png /app/share/icons/hicolor/512x512/apps/${FLATPAK_ID}.png
      - |
        if [ -f /app/booklet-tool.desktop ]; then
          install -Dm644 /app/booklet-tool.desktop /app/share/applications/${FLATPAK_ID}.desktop
          desktop-file-edit --set-key=Exec --set-value="booklet-tool %U" /app/share/applications/${FLATPAK_ID}.desktop
          desktop-file-edit --set-key=Name --set-value="Booklet Tool" /app/share/applications/${FLATPAK_ID}.desktop
        else
          echo "Warning: Desktop file not found in expected location"
          find /app -name "*.desktop" -type f
        fi

    sources:
      # Use the source code from the host directory mounted by the action
      - type: dir
        path: . 
      - type: file
        path: generated-sources.json
      - type: script
        dest-filename: electron-builder-arch-args.sh
        commands:
          - |
            if [ "$FLATPAK_ARCH" = "aarch64" ]; then
              echo 'export ELECTRON_BUILDER_ARCH_ARGS="--arm64"'
            elif [ "$FLATPAK_ARCH" = "arm" ]; then
              echo 'export ELECTRON_BUILDER_ARCH_ARGS="--armv7l"'
            else
              echo 'export ELECTRON_BUILDER_ARCH_ARGS=""'
            fi