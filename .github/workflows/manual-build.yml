name: Manual Build (Win/Linux/Flatpak)

on:
  workflow_dispatch: # Allows manual triggering
    inputs:
      run_native:
        description: 'Run Native Builds (Win/Linux)?'
        required: true
        type: boolean
        default: true
      run_flatpak:
        description: 'Run Flatpak Builds?'
        required: true
        type: boolean
        default: true
      flatpak_arch:
        description: 'Flatpak Architecture to Build'
        required: true
        type: choice
        options:
          - all
          - x86_64
          - aarch64
        default: 'all'

permissions:
  contents: read # Read permissions needed to checkout code

jobs:
  build-native:
    # This job builds Windows exe, Linux deb, tar.gz, AppImage
    name: Build Native (${{ matrix.os }} / ${{ matrix.arch }})
    # Explicitly compare input string to 'true'
    if: github.event.inputs.run_native == 'true'
    strategy:
      fail-fast: false # Keep running other builds if one fails
      matrix:
        include:
          - os: windows-latest
            arch: x64
            runner: windows-latest
            build_args: "--win --x64"
          - os: ubuntu-22.04
            arch: x64
            runner: ubuntu-22.04
            build_args: "--linux --x64"
          - os: ubuntu-24.04-arm
            arch: arm64
            runner: ubuntu-24.04-arm
            build_args: "--linux --arm64"

    runs-on: ${{ matrix.runner }} # Use runner from matrix

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main # Explicitly checkout main

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Install FPM for Linux Runners (for .deb build)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential rpm
          sudo gem install fpm

      - name: Check node_modules after install (ARM Linux)
        if: runner.os == 'Linux' && matrix.arch == 'arm64'
        run: |
          echo "----"
          echo Checking for Sharp platform package in node_modules/@img/
          ls -l node_modules/@img/
          echo "----"
          echo "Checking for Sharp libs in node_modules/@img/sharp-libvips-linux-arm64*/lib/"
          ls -lR node_modules/@img/sharp-libvips-linux-arm64*/lib/
          echo "----"
          echo "Finding all files containing 'vips' in node_modules/"
          find node_modules/ -iname '*vips*'
          echo "----"
        continue-on-error: true

      # Removed Flatpak install step - no longer needed here

      - name: Build application (Native)
        # Run electron-builder directly, targeting specific arch
        # Force using system FPM on Linux to avoid downloading incompatible binaries
        run: npx electron-builder ${{ matrix.build_args }} --publish never
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: "false"
          # Set USE_SYSTEM_FPM only for Linux builds
          USE_SYSTEM_FPM: ${{ runner.os == 'Linux' }}

      - name: List Sharp libs in unpacked dir (ARM Linux)
        if: runner.os == 'Linux' && matrix.arch == 'arm64'
        run: |
          UNPACKED_DIR="dist/linux-arm64-unpacked/resources/app.asar.unpacked"
          echo "----
          echo "Checking specific path: ${UNPACKED_DIR}/node_modules/@img/sharp-libvips-linux-arm64*/lib/"
          ls -lR "${UNPACKED_DIR}/node_modules/@img/sharp-libvips-linux-arm64*/lib/"
          echo "----
          echo "Finding all files containing 'vips' in ${UNPACKED_DIR}/"
          find "${UNPACKED_DIR}/" -iname '*vips*'
          echo "----"
        continue-on-error: true # Don't fail the build if the path doesn't exist

      - name: Upload Windows Artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: booklet-tool-windows-portable-${{ matrix.arch }}
          path: dist/*.exe
          retention-days: 7

      - name: Upload Linux Native Artifacts
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: booklet-tool-linux-native-${{ matrix.arch }}
          path: |
            dist/*.AppImage
            dist/*.deb
            # dist/*.flatpak # Removed flatpak from this upload
            dist/*.tar.gz
          retention-days: 7

  build-flatpak:
    # This job builds Flatpak using the recommended action
    name: Build Flatpak (${{ matrix.variant.arch }})
    # Explicitly compare input string to 'true'
    if: github.event.inputs.run_flatpak == 'true'
    runs-on: ${{ matrix.variant.runner }}
    strategy:
      fail-fast: false # Keep running other arch builds if one fails
      matrix:
        variant:
          - { arch: x86_64, runner: ubuntu-24.04 }
          - { arch: aarch64, runner: ubuntu-24.04-arm }

    # Use the Flathub container
    container:
      image: ghcr.io/flathub-infra/flatpak-github-actions:gnome-48 # Using gnome-48 SDK base
      options: --privileged # Needed for flatpak-builder

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      # Note: Node.js/npm are likely included in the Flathub container,
      # but explicitly setting up might be safer or needed for specific versions/caching.
      # - name: Set up Node.js (inside container)
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: '20.x'
      #     cache: 'npm'

      # Install deps inside container (needed by build command in manifest)
      # - name: Install dependencies (inside container)
      #   run: npm install --frozen-lockfile --ignore-scripts
      #   env:
      #     XDG_CACHE_HOME: ${{ github.workspace }}/.cache/npm # Cache npm inside workspace

      # Add step to configure Flatpak remotes before building
      - name: Configure Flatpak Remotes
        run: |
          flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          flatpak update --appstream
      
      - name: Install flatpak-node-generator
        run: |
          pip3 install --user git+https://github.com/flatpak/flatpak-builder-tools.git@master#subdirectory=node
        
      - name: Generate flatpak Node sources
        run: |          
          # Generate the sources file with a specific output name
          flatpak-node-generator npm \
            --electron-node-headers \
            --electron-ffmpeg=lib \
            -r \
            -o generated-sources.json \
            package-lock.json
          
          # Create architecture detection script for electron-builder
          if [ "${{ matrix.variant.arch }}" = "aarch64" ]; then
            echo '#!/bin/sh' > electron-builder-arch.sh
            echo 'export ELECTRON_BUILDER_ARCH_ARGS="--arm64"' >> electron-builder-arch.sh
          else
            echo '#!/bin/sh' > electron-builder-arch.sh
            echo 'export ELECTRON_BUILDER_ARCH_ARGS=""' >> electron-builder-arch.sh
          fi
          chmod +x electron-builder-arch.sh
          
          # Display generated file for debugging
          echo "Generated sources file content:"
          head -n 20 generated-sources.json
          
      - name: Build Flatpak
        # Only run this step if arch is 'all' or matches the matrix arch
        if: github.event.inputs.flatpak_arch == 'all' || github.event.inputs.flatpak_arch == matrix.variant.arch
        uses: flatpak/flatpak-github-actions/flatpak-builder@v6
        with:
          # Output bundle file name
          bundle: booklet-tool-${{ matrix.variant.arch }}.flatpak
          # Path to the manifest file we updated
          manifest-path: de.unibamberg.psi.booklet-tool.yml
          # Architecture from the matrix
          arch: ${{ matrix.variant.arch }}
          # Enable caching
          cache: true
          cache-key: flatpak-builder-${{ matrix.variant.arch }}-${{ github.sha }}

      - name: Upload Flatpak Artifact
        # Only run this step if arch is 'all' or matches the matrix arch
        if: github.event.inputs.flatpak_arch == 'all' || github.event.inputs.flatpak_arch == matrix.variant.arch
        uses: actions/upload-artifact@v4
        with:
          name: booklet-tool-flatpak-${{ matrix.variant.arch }}
          path: booklet-tool-${{ matrix.variant.arch }}.flatpak
          retention-days: 7 